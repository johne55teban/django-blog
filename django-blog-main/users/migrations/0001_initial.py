# Generated by Django 4.1.3 on 2022-11-30 19:55

from django.db import migrations, models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone


class Migration(migrations.Migration):
    # Configuración inicial de la migración
    initial = True

    # Dependencias de la migración
    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    # Operaciones de la migración
    operations = [
        # Creación del modelo de usuario personalizado
        migrations.CreateModel(
            name='User',  # Nombre del modelo
            fields=[
                # Definición de campos del modelo
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),  # Campo de contraseña
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),  # Último inicio de sesión
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),  # Superusuario
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),  # Nombre de usuario
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),  # Nombre
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),  # Apellido
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),  # Correo electrónico
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),  # Personal del staff
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),  # Usuario activo
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),  # Fecha de registro
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),  # Grupos a los que pertenece el usuario
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),  # Permisos del usuario
            ],
            options={
                'verbose_name': 'user',  # Nombre singular del modelo
                'verbose_name_plural': 'users',  # Nombre plural del modelo
                'abstract': False,  # No es un modelo abstracto
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),  # Manager predeterminado del modelo
            ],
        ),
    ]
